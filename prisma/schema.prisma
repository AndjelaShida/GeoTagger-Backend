// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// [] -viÅ¡e

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int       @id @default(autoincrement())
  username         String    @unique
  email            String    @unique
  password         String
  points           Int       @default(10)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  resetToken       String?
  resetTokenExpiry DateTime? //vreme do kad token
  role             String @default("user") //po defaltu novi user dobije ulogu user

  locations Location[] // 1 user ima vise Location(OneToMany)
  guesses   Guess[] //1 user ima vise Guess(OneToMany)
  logs      ActionLog[] // //1 user ima vise ActionLog(OneToMany)

  UserOfAuth UserOfAuth[]
  roles      Role[]       @relation("UserRoles") //1 korisnik moze imati vise uloga
}

model Role {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  users       User[]  @relation("UserRoles") //veza sa user modelom
}

model UserOfAuth {
  id         Int    @id @default(autoincrement())
  provider   String
  providerId String
  user       User   @relation(fields: [userId], references: [id])
  userId     Int
}

model Location {
  id        Int      @id @default(autoincrement())
  lat       Float //geografska sirina
  lon       Float //geografska duzina
  imageUrl  String //string jer se cuva link slike(npr na amazon s3 url)
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id]) //svaka location pripada 1 useru
  userId  Int //vise lokacija moze pripadati 1 useru
  guesses Guess[] //svaka Location moze imati vise Guess
}

model Guess {
  id        Int      @id @default(autoincrement())
  lat       Float
  lon       Float
  distance  Float
  createdAt DateTime @default(now())

  user   User @relation(fields: [userId], references: [id]) //svaki pogodak ima 1 usera
  userId Int //vise pogodaka moze pripadati 1 useru

  location   Location @relation(fields: [locationId], references: [id]) //svaki pogodak je za 1 lokaciju
  locationId Int //foregin key) -> Location.id, vise pogodaka moze pripradati istoj lokaciji
}

model ActionLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  action    String
  component String?
  newValue  String?
  url       String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id]) //1 akcija ima 1 usera
}
